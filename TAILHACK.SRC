;;
;;   SINISTAR "TAIL" MOD by SynaMax (10/14/23)
;;
;;   Original unused source file:
;;   https://github.com/historicalsource/sinistar/blob/main/SAM/TAIL.SRC
;;
;;   Recreates a removed player ship "exhaust tail" graphic.
;;
;;   ROMs 4, 5, 8, 11 have to be modified.  ROM 04 = $3000-3FFF
;;					    ROM 05 = $4000-4FFF
;;					    ROM 08 = $7000-7FFF
;;					    ROM 11 = $F000-FFFF
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;   While looking through the Sinistar source codebase, I stumbled
;;   upon an unused source file that greatly intriged me.
;;
;;   Sam Dicker wrote a routine for an exhaust "tail" graphic that 
;;   displays whenever the ship moves.  Two patches at the end
;;   reference address locations that match up with the "sinistarp"
;;   ROM set.  I think it's save to assume that this was intended 
;;   to be included and seen at the AMOA show in November 1982, 
;;   but that never happened.
;;
;;   I never knew this feature existed and I don't think anyone
;;   from the dev team has mentioned it before in interviews.
;;   
;;   The code itself is buggy.  It takes up a lot of RAM and
;;   crashes the game after warping to the next zone.
;;
;;   Considering the large amount of Static RAM reserved for
;;   this routine, I was assuming to see a much longer tail but
;;   only a tiny one can be seen.
;;
;;   It's possible to see a longer tail by uncommenting and
;;   modifying lines 324 and 348, however the tail doesn't 
;;   scroll along with the star background.  This doesn't look
;;   right.
;;  
;;   Despite it's buggy, incomplete nature, it is absolutely
;;   incredible to be able to reassemble this previously- 
;;   unheard-of code and patch it into the game.  This tail graphic
;;   hasn't been seen by anyone since 1982; 41 years ago!
;;
;;  Changes to the code include: 
;;
;;    * "!.$" have been replaced with "&$"
;;    * Macros for FRANDOM, RANDOM, VECTOR have been replaced
;;      the raw instructions found in dissassembly.
;;    * LDA X is now LDA ,X
;;    * ORG instructions are used instead of PUSHORG and
;;      PULLORG macros
;;
;;  To build this code, launch vasm and type in the following:
;;
;;  vasm6809_oldstyle -ast -Fbin -o tailhack.bin tailhack.src
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	ORG 	0
;	INCLUDE	START
;	INCLVER	SAM,SINISTAR.EQU
;	INCLVER	SAM,PLSUNIT
		
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Equates
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;		
PLSUNIT EQU	$9851
OIDESC	EQU	$0014
DHIGH 	EQU	$CA06
DDEST 	EQU	$CA04
DSOUR 	EQU	$CA02
DCTRL 	EQU	$CA00
DCNS  	EQU	$0010
ODRWVEC	EQU	$0018
OPDRWVE	EQU	$001A
DOBJECT	EQU	$4422
PLACCEL EQU	$9853
NOPOST	EQU	$45EA
SEEDS 	EQU	$982E			;; FRANDOM macro in the final build
					;; just loads value at $982E into A.
PMEMCTL	EQU	$BFFF
MEMCTL	EQU	$C900
IDSBOMB	EQU	$0B14			;; found in SAM/IMAGE.EQU
IPLAYER	EQU	$0007
WPLAYER	EQU	$9900
DXWB  	EQU	$0040
DXWT  	EQU	$0080
DZSP  	EQU	$0008
OLEFT 	EQU	$0006
OLPOS 	EQU	$0005
DSCY  	EQU	$0004
DWBL  	EQU	$0002
DTFL  	EQU	$0020

INITRAM	EQU	$32F0
PALETTE	EQU	$50CB
TEMP  	EQU	$9800
SINCOS	EQU	$47DA
ASRD6 	EQU	$48E6

OSEED1	EQU	$0000
OSEED2	EQU	$0002

PLXQUE	EQU	$7C6A

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

BASSAV	SET	$9897 			;; plenty of room for direct page ram

	SETDP	$98		
		
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Static RAM memory map
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;FEXPAND =	$D000			;; decompressed font sprites live here
;S0	 =	$D4F6			;; start of small font data
;SPER 	 =	$D73E
;SINIMAG =	$D77C
;	 =	$D870			;; used as Sinistar Image Pointer in MICA/SNXTSK.SRC
;CRIMAGE =	$DC76
;RISBOMB =	$DC7A			;; SAM'S SRAMSAVE SET
;RAMHSC	 =	$DC94    		;; High score stuff
;RAMLSC	 =	$DE2A			;; High score stuff	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		
;	PUSHORG	SRAMSAV
	ORG	$DC94			;; (let's overwrite High score RAM)
TAILDAT	RMB	140			;tail random data
;	PULLORG	SRAMSAV



;	PUSHORG	BASSAV
	ORG	BASSAV
TAILL	RMB	1			;\ tail l screen position
TAILS	RMB	1			;/ tail s screen position
TAILDMA	RMB	1			;tail flavor
PLDRWVE	RMB	2			;player erase-update-draw vector
;	PULLORG	BASSAV

;	PUSHORG	RAMSAV
	ORG	$B0C0			;; (empty space in extended RAM)
TAILBUF	RMB	3*5			;tail data buffer
;	PULLORG	RAMSAV

;	PUSHORG	ROMSAVE
	ORG	$F09F			;start of RAM/ROM test in ROM 11

* erase tail on player ship
ETAIL	LDX	OIDESC,Y
	LDD     #$0701			;LDD	#305!X404	set dma block size * * * FOR DMA BUG
	STD	DHIGH
	LDD	TAILL
	STD	DDEST
	LDD	#TAILBUF
	STD	DSOUR
	LDA	TAILDMA
	ORA	#DCNS
	STA	DCTRL
	JMP	[PLDRWVE]
		
* change image of tail on player ship
CTAIL	LDD	#ETAIL
	STD	ODRWVEC,Y
	LDD	#DOBJECT
	STD	PLDRWVE
	LDD	#TAIL
	STD	OPDRWVE,Y
* draw tail in player ship
TAIL	LDB	PLACCEL
	;; NEW CODE START ;;
	JSR	$42F9			;; JUMP TO CR4
	ORG	$42F9
	;; NEW CODE END ;;
	LBEQ	NOPOST			;; we get an error so we'll have to relocate
	;; NEW CODE START ;;		;; this closer to NOPOST and RTS back
	RTS
	ORG 	$F0D4
	;; NEW CODE END ;;
	ASLB
	CLRA
	ADDD	#TAILDAT
	TFR	D,U
;	FRANDOM	OSEED1,BYTE
	;;
	lda	SEEDS			;; (what FRANDOM actually does)
	;;
	ANDA	#$3F
	LEAU	A,U
	STU	DSOUR
	LDD	#TAILBUF
	STD	DDEST
	LDD     #$0701			;LDD	#305!X404	set dma block size * * * FOR DMA BUG
	STD	DHIGH
	LDA	PMEMCTL
	PSHS	A
;	ANDA	#!N4
	anda    #$FB			;; originally #!N4 (so FF - 4 = FB)
	STA	PMEMCTL
	STA	MEMCTL
	CLR	DCTRL
	LDD	#IDSBOMB
	STD	DSOUR
	LDA	#DXWT+DXWB+DCNS+DZSP
	STA	DCTRL
*<<< optimize this >>>
	PULS	A
	STA	PMEMCTL
	STA	MEMCTL
	LDD	#TAILBUF
	STD	DSOUR
	LDB	OIDESC+1,Y
	SUBB	#IPLAYER&$FF
	LSRB	
	LSRB	
	LDX	#TAILTBL				
	ABX	
	LDA	1,X
	ADDA	OLEFT,Y
	STA	DDEST+1
	STA	TAILS
	LDA	,X			;; need to add the comma
	CLRB	
	ASRA	
	RORB	
	ADDD	OLPOS,Y
	STA	DDEST
	STA	TAILL
	LDA	#DZSP+DSCY+DWBL	
	BCS	1$
	ORA	#DTFL
1$	STA	DCTRL	
	STA	TAILDMA
	JMP	NOPOST

	LOCAL
* initialize random tail data
;	VECTOR	SYSVECT
	ORG	$31D3			;; Insert hook to SYSVECT
	JSR	$F147			;; by overwriting three NOPs
	org	$F147			;; at $31D3 with JSR $F147
	LDX	#TAILDAT
	CLRA
	LDB	#$C0
	JSR	INITRAM
	JSR	INITRAM
	LDX	#PALETTE
	CLR	TEMP
11$	LDA	,X
	BEQ	2$
	BITA	#$C0
	BEQ	6$
	BITA	#$30
	BNE	2$
6$	LDA	#$40
	STA	TEMP+1
;5$	RANDOM	OSEED1,BYTE
	;
5$	LDA     #$00
	JSR     $4802
	;
	ANDA	#$3F
	JSR	SINCOS
	CLRB	
	JSR	ASRD6
	PSHS	D
;	RANDOM	OSEED2,BYTE
	;
	LDA     #$02
	JSR     $4802
	;
	TFR	A,B
	ANDB	#$7F
	CLRA	
	ADDD	,S++
	LSRA	
	RORB	
	LDU	#TAILDAT
	LEAU	D,U
	LDA	,U
	BCS	3$
	ANDA	#$0F
	STA	TEMP+2
	LDA	TEMP
	ASLA
	ASLA
	ASLA
	ASLA
	ORA	TEMP+2	
	BRA	4$
3$	ANDA	#$F0
	ORA	TEMP
4$	STA	,U
	DEC	TEMP+1
	BNE	5$
2$	INC	TEMP
	LEAX	1,X
	CMPX	#PALETTE+10
	BLO	11$
	RTS


;;	VECTOR	INIVECT
;;
;;  The VECTOR macro is confusing but it appears to link a bunch of JSRs together and
;;  then execute everything after reaching the last jump, using RTS to go back to each previous
;;  INIVECT routine for that specific programmer.
;;
;;  The jumps for Inivect start at 309A (Sam), then, 5189, 51ED (Witt), 7415 (Noah), 82F1 (RJ),
;;  and finally 8E55.
;;  Once it reaches 8E55, it starts executing all the instructions and chains all the
;;  INIVECT routines from each programmer and executes it as one giant routine.
;;
;;  8E55 is the patch "SAM/FIXPLUNI.SRC" and has a bunch of NOPs at 8E55...
;;  maybe we can put our patch here?
;;
;;  maincpu.rw@8e55 = bdf1
;;  maincpu.rb@8e57 = b1
;;
;;  After some initial tests, it seems that this patch actually makes the game more unstable?
;;
;;	ORG	$8E55
;;	JSR	$F1B1
;;	ORG	$F1B1
	CLRA
	CLRB
	STD	TAILL			;zero tail screen position
*<<< add to player initialization >>>
	LDD	#DOBJECT		;initialize player erase-update-draw vector
	STD	PLDRWVE
	LDD	#ETAIL			;give player erase tail erase-update-draw vector
	STD	ODRWVEC+WPLAYER
	LDD	#TAIL			;give player tail post-draw vector
	STD	OPDRWVE+WPLAYER
	RTS

		
		
* patch to player image rotation
;	ERR	OLD ADDRESS
;	PUSHORG	$3789
	ORG	$378A
;;  
;;  We're very lucky to have the original addresses here
;;  match up with the earlier AMOA '82 build.  This helped
;;  me figure out where the instructions were located in
;;  the final build.  This patch was off by one byte, but
;;  the other patch was way off.
;;
	JSR	100$
;	PULLORG
	ORG	$F1C7			;; (returning to the main chunk of code)
100$
* * *
	;;
;	STX	ODRWVEC,Y		;; (I originally added this back since it gets
					;; overwritten by JSR at $378A, but it doesn't
					;; erase the tail after every frame.  It's a
					;; cool effect, but not what we want)
	;;
	STX	PLDRWVE
	LDD	#CTAIL			;give player change tail post-draw vector
	STD	OPDRWVE,Y
* * *
	RTS

* tail offset table
TAILTBL	FDB	$FC02,$FC02,$FD01,$FDFF,$FFFE,$FFFD,$00FD,$FFFD
	FDB	$02FB,$02FD,$05FD,$05FD,$07FE,$08FF,$0900,$0A01
	FDB	$0A03,$0A02,$0905,$0905,$0707,$0509,$040A,$020A
	FDB	$020A,$020A,$010A,$0009,$FF08,$FD05,$FD05,$FC02

*<<< for Noah >>>
;	ERR	OLD ADDRESS
;	PUSHORG	$6F51
	;6F51 is AMOA address, 736D is final build address!!!
	ORG	$736D
	JSR	101$
;	PULLORG
	ORG	$F210			;; (change to $F213 if including "STX	ODRWVEC,Y")
101$
* * *
	LDD	#NOPOST			;turn off player's tail
	STD	OPDRWVE,X
* * *
	JSR	PLXQUE			;* START UP PLAYER EXPLOSION
	RTS
;	PULLORG	ROMSAVE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
;; Patch to avoid triggering copyright protection and to skip
;; ROM/RAM "Rug" test which has been overwritten by this new code.
	ORG	$F063
	NOP
	NOP
	ORG	$F069
	NOP
	NOP
	NOP

	END
