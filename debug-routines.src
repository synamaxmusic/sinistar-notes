;; The following is code found in WITT/AOE.SRC, WITT/RICH.EQU,
;; and SAM/BARGRAPH.SRC that allows debug graphs to be drawn 
;; on screen.
;;
;; vasm6809_oldstyle -ast -Fbin -o debug-routines.bin debug-routines.src

ROMSAVE SET	$F09F		;;(overwrite ROM/RAM test)
BASSAVE	SET	$9897		;starting address of direct page ram ;;(starts at $9800)
RAMSAVE	SET	$B0C0		;starting address of extended ram    ;;(starts at $9900)
SRAMSAV	SET	$DC94		;starting address of static ram      ;;(overwrites high score)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;   Equates/Hardware constants
;;   (DMA constrants from SAM/SAMEQUAT.SRC)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PANMASK	EQU	$9880
PMEMCTL	EQU	$BFFF		;pseudo memory control byte
MEMCTL	EQU	$C900		;memory control byte
DCTRL	EQU	$CA00		;dma status byte
DCONS	EQU	$CA01		;dma constant
DSOUR	EQU	$CA02		;dma source address
DDEST	EQU	$CA04		;dma destination address
DHIGH	EQU	$CA06		;dma height
DWIDE	EQU	$CA07		;dma width

DRBL	EQU	$1		;dma read block
DWBL	EQU	$2		;dma write block
DSCY	EQU	$4		;dma slow cycle
DZSP	EQU	$8		;dma zero suppression
DCNS	EQU	$10		;dma constant substitution
DTFL	EQU	$20		;dma top flavor
DXWB	EQU	$40		;dma ex-or write enable bottom pixel
DXWT	EQU	$80		;dma ex-or write enable top pixel

WAgg  	EQU	$A03C		;;Warrior Aggression

PALETTE	EQU	$50CB
TEMP  	EQU	$9800
TASK64	EQU	$A189

	SETDP	$98

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  WITT/RICH.EQU
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;	IFDEF	DIAGNOSE
;	PUSHORG	0
	ORG 0
DUMMY0		rmb	1	;	* 0 Invisible graph
GMinutes	rmb	1	;* 1 Play time in minutes
GSeconds	rmb	1	;* 2   and seconds.
GAggression	rmb	1	;* 3 Warrior aggression (high byte)
GDeathTime	rmb	1	;* 4 Time since Player death
GDistance	rmb	0	;* 5 Distance
GANANG		rmb	1	;* 5 Animation angle of squadron leader.
GVelocity	rmb	0	;* 6 Velocity
GFLANG		rmb	1	;* 6 Flight angle of squadron leader.
DUMMY1		rmb	1	;	* 7 Special
DUMMY2		rmb	1	;	* 8   Effects
GMWaDrift	rmb	1	;* 9 The # of Drifting warriors
GMWaAttack	rmb	1	;* A The # of Attacking warriors
GMWaMine	rmb	1	;* B The # of Mining warriors
GMWaTail	rmb	1	;* C The # of Guarding warriors
GMWaInt		rmb	1	;* D The # of Intercepting warriors
DUMMY3		rmb	1	;	* E <SPECIAL EFFECT>
DUMMY4		rmb	1	;	* F
;	IFLT	$10-*
;	ERR	Too Many Diagnostic Bars
;	ENDIF	0to15.
;	PULLORG
;	ENDIF	Diagnose

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

BARGRAPH
;	PUSHORG	RAMSAVE
	ORG	RAMSAVE
PGRAPH	RMB	10		;\ previous bar graph lengths ( values/4)
GRAPH	RMB	10		;/ bar graph values
JUNKTIME	rmb	2	;;(TAKEN FROM RICHS DEBUG STUFF)
;	PULLORG	RAMSAVE

;	PUSHORG	ROMSAVE

;	VECTOR	INIVECT
	;;
	ORG	$8E55		;; insert hook for INIVECT by
	JSR	ROMSAVE		;; overwriting three NOPs at $8E55
	ORG	ROMSAVE		;; and then we go back to $F09F
	;;
	LDD	#$9999		;draw bar graph right end line
	LDX	#$75DA		
1$	STD	,X		
	LEAX	$100,X		
	CMPX	#$8EDA		
	BLO	1$		
	LDX	#PGRAPH		;set bar graph lengths/zero initial values
	LDU	#GRAPH		
	LDD	#$0F3F
2$	STB	A,X		
	CLR	A,U		
	DECA			
	BPL	2$
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Richs code
	clr	JUNKTIME
	clr	JUNKTIME+1
;	New_Sleep	Task64,1$
;	rts	
	JSR     $46BB
	FDB	JUNKY
	FDB	TASK64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	RTS		

;	VECTOR	EXEVECT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  Thankfully, there's three NOPs here at $510F
;;  that we can use for inserting our hook.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ORG	$510F
	JSR	BAREXEV
	ORG 	$F0CE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
BAREXEV	LDA	PANMASK		;player flying on?
	BITA	#8
	BNE	10$
	RTS			;no?, that's all folks
*
10$	LDA	PMEMCTL		;update bar graphs: dma inhibit off
	PSHS	A
;	ANDA	#!N4
	ANDA    #$FB		;;originally #!N4 (so FF - 4 = FB)
	STA	PMEMCTL
	STA 	MEMCTL
;	LDA	#1!X4		* * *TEMPORARY FOR DMA BUG
	LDA     #$05
	STA	DHIGH		;set DMA height
	LDA	#$0F		;initialize bar number
	LDX	#PGRAPH
	LDU	#GRAPH
1$	LDB	A,U		;get new value
	LSRB			;convert to lengths
	LSRB
	CMPB	A,X		;has it changed?
	BEQ	4$
	PSHS	CC		;save change
	STB	A,X		;save new length
	STA	TEMP		;save bar #
	PULS	CC		;longer or shorter?
	BMI	2$
	EORB	#$04		;* * *TEMPORARY FOR DMA BUG
	STB	DWIDE		;set DMA width
	LDB	#$11		;longer, compute color
	MUL
	STB	DCONS		;set DMA constant
	LDA	TEMP		;get bar #
	ADDA	#$79		;compute screen position
	LDB	#$9B
	STD	DDEST		;set DMA destination
	BRA	3$
2$	ADDD	#$799B		;compute screen position
	STD	DDEST		;set DMA destination
	COMB			;compute width
	ADDB	#$40+$9B
	EORB	#$04		;* * *TEMPORARY FOR DMA BUG
	STB	DWIDE		;set DMA width
3$	LDA	#DCNS+DWBL	;draw or erase bar
	STA	DCTRL
	LDA	TEMP		;restore bar # / wait for DMA
	CLR	DCONS		;zero constant
4$	DECA			;done?
	BGE	1$
	PULS	A		;dma inhibit on
	STA	PMEMCTL
	STA 	MEMCTL
	RTS

;	PULLORG	ROMSAVE

*****
*
* WORK UTILITIES
*
*****
;	IFDEF	Diagnose	*****************************************
;	IFE	VERSION-9						*
;	ENDIF	VERSION							*
;	INCLVER	SAM,bargraph		* <<< Bar Graphs >>>	*
;	PUSHORG	Palette							*
	ORG	PALETTE
	fcb	@067,@377,@277,@256,@255,@244,@232,@067			
	fcb	@377,@311,@120,@113,@005,@007,@007,@067			

;;The following code was relocated to the BARGRAPH INIVECT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	PULLORG
*									*
;	PUSHORG	RAMSAVE							*
;	RORG	RAMSAVE		;;(new)
;JUNKTIME	rmb	2	;;(moving over to previous RAMSAVE)	*
;	PULLORG	RAMSAVE							*
*									*
;	PUSHORG	ROMSAVE
;	LOCAL								*
;	VECTOR	IniVect							*
;	clr	JUNKTIME						*
;	clr	JUNKTIME+1						*
;	New_Sleep	Task64,1$					*
;	rts								*
**									*
*	Time clock							*
**									*
;1$	pshs	D,X,U							*
	;;
	ORG	$F13B		;;(new)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
JUNKY	pshs	D,X,U
	ldd	JUNKTIME						
	addd	#(1*4)		;* Or (2*4) on the 128 list.		
	std	JUNKTIME					
	asla								
	asla								
	sta	GRAPH+GMinutes						
	stb	GRAPH+GSeconds
**									*
*	Monitor Warrior Aggression					*
**									*
	lda	WAgg			;* Monitor the high byte	of	*
	asla				;*   (shifted to scale)		*
	sta	GRAPH+GAggression	;*   the warrior aggression	*
;**
;*	Monitor Missions
;**
;	ldx	#Temp
;	clr	TGMWaDrift,X
;	clr	TGMWaAttack,X
;	clr	TGMWaMine,X
;	clr	TGMWaTail,X
;	clr	TGMWaInt,X
;
;	ldu	#Ground
;	cmpu	KeyClee+2
;	beq	4$
;	ldu	[KeyClee+2]
;2$	lda	OSMIS,U
;	cmpa	#OMWaSav
;	bge	3$
;	asra
;	ldb	A,X	
;	addb	#(4.*4.)
;	stb	A,X	
;3$	ldu	[OSCTYPT,U]
;	cmpu	#Ground
;	bne	2$
;
;4$	lda	TGMWaDrift,X
;	sta	Graph+GMWaDrift
;	lda	TGMWaAttack,X
;	sta	Graph+GMWaAttack
;	lda	TGMWaMine,X
;	sta	Graph+GMWaMine
;	lda	TGMWaTail,X
;	sta	Graph+GMWaTail
;	lda	TGMWaInt,X
;	sta	Graph+GMWaInt
;	ENDIF	1		*******	Turned off for now. *************
	puls	D,X,U							
;	SLEEP	LOOP							*
	LDD    -$2,Y
	FDB	$DD42		;;(was originally STD  $42, but vasm uses a different opcode)
	RTS
;	PULLORG	ROMSAVE							*
;	ENDIF	Diagnose	*****************************************	
	LOCAL
;	NLIST
BCF	MACRO	\1,\2,\3
	IFNE	\1
	FCB	\1
	ELSE
	RMB	1
	ENDIF
	IFNE	\2
	FCB	\2
	ELSE
	RMB	1
	ENDIF
	IFNE	\3
	FCB	\3
	ELSE
	RMB	1
	ENDIF
	RMB	7
	ENDM
;	IFE	1
;	PUSHORG	$E4E
	ORG	$0E4E
	BCF	$5B,$BB,$BB
	BCF	$B5,$00,$00
	BCF	$5B,$B5,$00
	BCF	$B6,$00,$00
	BCF	$AB,$BB,$BB
	BCF	$00,$00,$00
	BCF	$AB,$BB,$BB
	BCF	$00,$00,$00
	BCF	$00,$00,$AB
	BCF	$AB,$BB,$BB
	BCF	$00,$00,$AB
	BCF	$00,$00,$00
	BCF	$00,$00,$AB
	BCF	$AB,$BB,$BB
	BCF	$00,$00,$AB
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
;; Patch to avoid triggering copyright protection and to skip
;; ROM/RAM "Rug" test which has been overwritten by this new code.
	ORG	$F063
	NOP
	NOP
	ORG	$F069
	NOP
	NOP
	NOP

;; Patch to clear out ROM checksum table (this is probably unnecessary in this mod)

	ORG	$F34F
	FDB	$0000    
	FDB	$1000    
	FDB	$2000   
	FDB	$3000  
	FDB	$4000  
	FDB	$5000  
	FDB	$6000  
	FDB	$7000  
	FDB	$8000  
	FDB	$9000  
	FDB	$A000  
	FDB	$B000  
	FDB	$C000  
	FDB	$D000  
	FDB	$E000  
	FDB	$F000  
	END
