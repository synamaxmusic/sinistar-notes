Sinistar is noted for its intense difficulty, a request made by
Williams Electronics's upper management that the devs begrudgingly made.

The enemies spawn into the game using Initial Populations tables.  This
is where the game's balancing issues are located.

The tables can be found at address $7ABE.  Here is a source code excerpt for
N1ALL.SRC, located in the FALS folder:

*
*			Initial Population table
*
*	SAM - you can put those new tables here
*
*
*			Initial Population tables
* 	Population tables have one-byte current population, two byte
*	desired population (LSB is fractional part) for each CD in
*	Scanner Object Char. Desc. Table (see ScOCDT)
*	Sequence of waves: InPop0,2,3,4,1,2,3,4,1,2,3,4 etc.
*

*		InPop0 - Initial population for first wave only

InPop0	fcb	0,6,0		* Workers
	fcb	0,0,0		* Warriors
	fcb	0,10.,0		* Type 1 planets
	fcb	0,2,0		* Type 2 planets
	fcb	0,2,0		* Type 3 planets
	fcb	0,2,0		* Type 4 planets
	fcb	0,2,0		* Type 5 planets
*			NOTE: objects past this point are NOT initialized
*				automatically, but are included for con-
*				sistency, and to zero out the current values
	fcb	0,0,0		* SiniBombs
	fcb	0,0,0		* Crystals
	fcb	0,1,0		* SiniStar
	fcb	0,1,0		* Player

IP0End	rmb	0		* Marks end of table
*
*
*		Difficulty increase figures for this population
*
InDif0	fdb	DTime
	fcb	6
	fdb	.PWor		* Workers
	fcb	10
	fdb	.PWar		* Warriors
	fcb	-8
	fdb	.PPl1		* Plan1's
	fcb	10
	fdb	.PPl3		* Plan3's
	fcb	3
	fdb	.PPl5		* Plan5's
	fcb	$7F
	fdb	.WAgg		* Warrior aggression
	fcb	0

ID0End	rmb	0		* Marks end of diff. table

*		InPop1 - Void Zone

InPop1	fcb	6		* Workers
	fcb	8		* Warriors
	fcb	1		* Type 1 planets
	fcb	1		* Type 2 planets
	fcb	1		* Type 3 planets
	fcb	1		* Type 4 planets
	fcb	3		* Type 5 planets
*			NOTE: objects past this point are NOT initialized
*				automatically, but are included for con-
*				sistency, and to zero out the current values
	fcb	0		* SiniBombs
	fcb	0		* Crystals
	fcb	1		* SiniStar
	fcb	1		* Player
*
*
*		Difficulty increase figures for this population
*
	fdb	DTime
	fcb	6
	fdb	.PWor		* Workers
	fcb	10
	fdb	.PWar		* Warriors
	fcb	-1
	fdb	.PPl1		* Plan1's
	fcb	-1
	fdb	.PPl3		* Plan3's
	fcb	3
	fdb	.PPl5		* Plan5's
	fcb	$7F
	fdb	.WAgg		* Warrior aggression
	fcb	0

ID1End	rmb	0		* Marks end of diff. table

*		InPop2 - Worker Zone

InPop2	fcb	10		* Workers
	fcb	3		* Warriors
	fcb	10.		* Type 1 planets
	fcb	2		* Type 2 planets
	fcb	2		* Type 3 planets
	fcb	2		* Type 4 planets
	fcb	2		* Type 5 planets
*			NOTE: objects past this point are NOT initialized
*				automatically, but are included for con-
*				sistency, and to zero out the current values
	fcb	0		* SiniBombs
	fcb	0		* Crystals
	fcb	1		* SiniStar
	fcb	1		* Player
*
*
*		Difficulty increase figures for this population
*
	fdb	DTime
	fcb	10.
	fdb	.PWor		* Workers
	fcb	10
	fdb	.PWar		* Warriors
	fcb	-8
	fdb	.PPl1		* Plan1's
	fcb	10
	fdb	.PPl3		* Plan3's
	fcb	3
	fdb	.PPl5		* Plan5's
	fcb	$7F
	fdb	.WAgg		* Warrior aggression
	fcb	0

*		InPop3 - Warrior Zone

InPop3	fcb	4		* Workers
	fcb	10.		* Warriors
	fcb	10.		* Type 1 planets
	fcb	2		* Type 2 planets
	fcb	2		* Type 3 planets
	fcb	2		* Type 4 planets
	fcb	2		* Type 5 planets
*			NOTE: objects past this point are NOT initialized
*				automatically, but are included for con-
*				sistency, and to zero out the current values
	fcb	0		* SiniBombs
	fcb	0		* Crystals
	fcb	1		* SiniStar
	fcb	1		* Player
*
*
*		Difficulty increase figures for this population
*
	fdb	DTime
	fcb	4
	fdb	.PWor		* Workers
	fcb	10
	fdb	.PWar		* Warriors
	fcb	-8
	fdb	.PPl1		* Plan1's
	fcb	10
	fdb	.PPl3		* Plan3's
	fcb	3
	fdb	.PPl5		* Plan5's
	fcb	$7F
	fdb	.WAgg		* Warrior aggression
	fcb	0

*		InPop4 - Planetoid Zone

InPop4	fcb	6		* Workers
	fcb	8		* Warriors
	fcb	10		* Type 1 planets
	fcb	2		* Type 2 planets
	fcb	10		* Type 3 planets
	fcb	2		* Type 4 planets
	fcb	5		* Type 5 planets
*			NOTE: objects past this point are NOT initialized
*				automatically, but are included for con-
*				sistency, and to zero out the current values
	fcb	0		* SiniBombs
	fcb	0		* Crystals
	fcb	1		* SiniStar
	fcb	1		* Player
*
*
*		Difficulty increase figures for this population
*
	fdb	DTime
	fcb	6
	fdb	.PWor		* Workers
	fcb	10.
	fdb	.PWar		* Warriors
	fcb	10
	fdb	.PPl1		* Plan1's
	fcb	10
	fdb	.PPl3		* Plan3's
	fcb	3
	fdb	.PPl5		* Plan5's
	fcb	$7F
	fdb	.WAgg		* Warrior aggression
	fcb	0



*
*		DEMO Population figures
*

InPopD	fcb	0,2,0		* Workers
	fcb	0,0,0		* Warriors
	fcb	0,4,0		* Type 1 planets
	fcb	0,4,0		* Type 2 planets
	fcb	0,4,0		* Type 3 planets
	fcb	0,4,0		* Type 4 planets
	fcb	0,5,0		* Type 5 planets
*			NOTE: objects past this point are NOT initialized
*				automatically, but are included for con-
*				sistency, and to zero out the current values
	fcb	0,0,0		* SiniBombs
	fcb	0,0,0		* Crystals
	fcb	0,1,0		* SiniStar
	fcb	0,1,0		* Player
*
*
*		Difficulty increase figures for this population
*
	fdb	DTime
	fcb	6
	fdb	.PWor		* Workers
	fcb	1
	fdb	.PWar		* Warriors
	fcb	1
	fdb	.PPl1		* Plan1's
	fcb	1
	fdb	.PPl3		* Plan3's
	fcb	3
	fdb	.PPl5		* Plan5's
	fcb	$7F
	fdb	.WAgg		* Warrior aggression
	fcb	0
*
InOEnd	rmb	0		* End of table

.PPL1	fdb	Pop+7		* Type 1 planet difficulty table root
	fcb	0

.PPL3	fdb	Pop+0D		* Type 3 planet difficulty table root
	fcb	0

;;------------------------------------------------------------------------------

Each InPop table is followed by a Difficulty Increase table (let's call this "Diff").

There are five waves and they are sequenced like this:
InPop0, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,etc.

InPop0 = First Zone
InPop1 = Void Zone (last wave)
InPop2 = Worker Zone
InPop3 = Warrior Zone
InPop4 = Planetoid Zone

To save space, only 2 population tables (First Zone and Attract Demo) have the
additional padding needed when these tables are copied over to memory.  

Here's what the first table looks like at $7ABE:

InPop0: 00 06 00	;Workers
        00 00 00	;Warriors
        00 0A 00	;Planetoid 1
        00 02 00	;Planetoid 2
        00 02 00	;Planetoid 3
        00 02 00	;Planetoid 4
        00 02 00	;Planetoid 5
        00 00 00	;Sini-Bombs
        00 00 00	;Crystals
        00 01 00	;SiniStar
        00 01 00	;Player

Each entry in the Diff table has a two-byte address pointer, followed by the increase value.
 
Diff0:  A0 19		;DTime
	06 		;Workers Pop Increase/Difficulty Timer Enable
        59 A4		;.PWor
	10 		;Warriors Pop Increase
        59 A7		;.PWar
	F8 		;Planetoid 1 Pop Increase (or decrease in this case)
        7B AA		;.PPl1	
	10 		;Planetoid 3 Pop Increase
        7B AD		;.PPl3
	03 		;Planetoid 5 Pop Increase
        59 AA		;.PPl5	
	7F 		;Warrior Aggression (WAgg)
        59 AD		;.WAgg
	00		;padding (must always be zero or the game WILL crash)


;;------------------------------------------------------------------------------

WITT/RAMRICH.SRC has a section labled as PLAYSAV that contains the RAM definitions.

*****
*
*	PPPP   L       AAA   Y   Y   SSSS   AAA   V   V  EEEEE
*	P   P  L      A   A   Y Y   S      A   A  V   V  E
*	PPPP   L      AAAAA    Y     SSS   AAAAA  V   V  EEEE
*	P      L      A   A    Y        S  A   A   V V   E
*	P      LLLLL  A   A    Y    SSSS   A   A    V    EEEEE
*
*****
	PUSHORG	PlaySav
DTime		rmb	2	* Difficulty Timer
Pop		rmb	21	*((CDTEnd-ScoCdt)*3)/2	* Pop. of sector - each 3 bytes
*				  corresponds to a C.D. - first byte is
*				  current Population, next two are desired pop.
WAgg		rmb	2		* Warrior aggression factor
SiniKills	rmb	1	* The number of Sinistars killed.

;;------------------------------------------------------------------------------

			***POPULATION RAM STRUCTURE***
   
$A019 starts the section of memory dedicated to controlling the populations and difficulty
timer during gameplay.

$A019 = Difficulty Timer (2 BYTES)

$A01B = Worker Current Pop (Current enemies in the sector)
$A01C = Worker Desired Pop (The value found in the InPop table)
$A01D = Worker Desired Pop (Fractional byte, grows with every Difficulty timer tick)

$A01E = Warrior Current Pop
$A01F = Warrior Desired Pop
$A020 = Warrior Desired Pop (Fractional byte)

$A021 = Planetoid 1 Current Pop
$A022 = Planetoid 1 Desired Pop 
$A023 = Planetoid 1 Desired Pop (Fractional byte)

$A024 = Planetoid 2 Current Pop
$A025 = Planetoid 2 Desired Pop
$A026 = Planetoid 2 Desired Pop (Fractional byte)

$A027 = Planetoid 3 Current Pop
$A028 = Planetoid 3 Desired Pop
$A029 = Planetoid 3 Desired Pop (Fractional byte)

$A02A = Planetoid 4 Current Pop
$A02B = Planetoid 4 Desired Pop
$A02C = Planetoid 4 Desired Pop (Fractional byte)

$A02D = Planetoid 5 Current Pop
$A02E = Planetoid 5 Desired Pop
$A02F = Planetoid 5 Desired Pop (Fractional byte)

$A030 = Sini-Bombs Current Pop
$A031 = Sini-Bombs Desired Pop
$A032 = Sini-Bombs Desired Pop (Fractional byte)

$A033 = Crystals Current Pop
$A034 = Crystals Desired Pop
$A035 = Crystals Desired Pop (Fractional byte)

$A036 = Sinistar Current Pop
$A037 = Sinistar Desired Pop
$A038 = Sinistar Desired Pop (Fractional byte)

$A039 = Player Current Pop
$A03A = Player Desired Pop
$A03B = Player Desired Pop (Fractional byte)

$A03C = Current Warrior Aggression 
$A03D = Warrior Aggression (Fractional byte)
$A03E = SiniKills 

The Diff table gets copied entirely at $A03F:

$A03F = Difficulty Timer Pointer ($A019)
$A041 = Workers Pop Increase / Difficulty Timer value (zero this to stop spawning new enemies)
$A042 = Workers Pointer ($59A4)

$A044 = Warriors Pop Increase
$A045 = Warriors Pointer ($59A7)

$A047 = Plan1 Pop Increase
$A048 = Plan1 Pointer ($7BAA)

$A04A = Plan3 Pop Increase
$A04B = Plan3 Pointer ($7BAD)

$A04D = Plan5 Pop Increase
$A04E = Plan5 Pointer ($59AA)

$A050 = Warrior Aggression
$A051 = Warrior Aggression Pointer ($59AD)
$A053 = padding (must always be zero or the game WILL crash)

;;------------------------------------------------------------------------------

***IMPORTANT DTIMER NOTE (9/13/23)***

The Operator Difficulty setting found in CMOS is taken into consideration and acts as a seed
for all difficulty increase functions, as well as the starting value of DTimer.

Default value is 5 and all the math that follows assumes this is what the game is currently set to.

All math is handled by the ChgA routine found in Sam's FUNCTION.SRC (which is called in Noah's N1ALL.SRC)

3$	pshs	X
	ldx	#GA1		* Operator difficulty adjust
	jsr	RCmosA		* Read from CMOS
	puls	X


	jsr	ChgA		* bump up the difficulty a bit at the beginning
	fdb	.DifTmr		* depending on operator setting 

;;------------------------------------------------------------------------------

Populations for all the different entities seem to be affected by each other.
Setting 7F to one of the unused bytes for Sini-bombs or Crystals floods the
sector with nothing.  Eventually there's not enough room for all the enemies.

;;------------------------------------------------------------------------------

			***MAME CHEAT SHEET***
INPOP0 - FIRST ZONE POP TABLE VALUES

(Workers)
maincpu.rw@7abe = 00xx

(Warriors)
maincpu.rw@7ac1 = 00xx

(Plan1)
maincpu.rw@7ac4 = 00xx

(Plan2)
maincpu.rw@7ac7 = 00xx

(Plan3)
maincpu.rw@7aca = 00xx

(Plan4)
maincpu.rw@7acd = 00xx

(Plan5)
maincpu.rw@7ad0 = 00xx

DIFF0 - FIRST ZONE DIFF TABLE VALUES    **9/10/23 - Fixed labels**

(Worker Increase / Difficulty Timer Enable)
maincpu.rb@7ae1 = xx

(Warrior Increase)
maincpu.rb@7ae4 = xx

(Plan1 Increase)
maincpu.rb@7ae7 = xx

(Plan3 Increase)
maincpu.rb@7aea = xx

(Plan5 Increase)
maincpu.rb@7aed = xx

(Warrior Aggression Increase)
maincpu.rb@7af0 = xx


;;----------------------9/9/23----------------------------------------------------

Okay, so I did some tests and I found some patterns in memory that I feel
are important:

     A019  09 00 06 06 00 00 00 00 0A 0A 00 02 02 00 02 02    ...............
     A029  00 02 02 00 02 02 00 00 00 00 00 00 00 01 01 00   ................
     A039  00 01 00 00 00 00 A0 19 00 59 A4 10 59 A7 F8 7B   ...... ..Y¤.Y§ø{
     A049  AA 10 7B AD 03 59 AA 7F 59 AD 00 00 00 00 00 00   ª.{-.Yª.Y-......

     A019  05 00 06 06 0A 00 00 A0 09 09 B0 02 02 00 02 02   .......   °.....
     A029  A0 02 02 00 02 02 1E 00 00 00 00 00 00 01 01 00    ...............
     A039  00 01 00 04 F6 00 A0 19 01 59 A4 10 59 A7 F8 7B   ....ö. ..Y¤.Y§ø{
     A049  AA 10 7B AD 03 59 AA 7F 59 AD 00 00 00 00 00 00   ª.{-.Yª.Y-......
 
     A019  05 00 06 06 14 00 00 A0 09 09 B0 02 02 00 02 02   .......   °.....
     A029  A0 02 02 00 02 02 1E 00 00 00 00 00 00 01 01 00    ...............
     A039  00 01 00 04 F6 00 A0 19 02 59 A4 10 59 A7 F8 7B   ....ö. ..Y¤.Y§ø{
     A049  AA 10 7B AD 03 59 AA 7F 59 AD 00 00 00 00 00 00   ª.{-.Yª.Y-......

     A019  05 00 06 06 1E 00 00 A0 09 09 B0 02 02 00 02 02   .......   °.....
     A029  A0 02 02 00 02 02 1E 00 00 00 00 00 00 01 01 00    ...............
     A039  00 01 00 04 F6 00 A0 19 03 59 A4 10 59 A7 F8 7B   ....ö. ..Y¤.Y§ø{
     A049  AA 10 7B AD 03 59 AA 7F 59 AD 00 00 00 00 00 00   ª.{-.Yª.Y-......

     A019  05 00 06 06 28 00 00 A0 09 09 B0 02 02 00 02 02   ....(..   °.....
     A029  A0 02 02 00 02 02 1E 00 00 00 00 00 00 01 01 00    ...............
     A039  00 01 00 04 F6 00 A0 19 04 59 A4 10 59 A7 F8 7B   ....ö. ..Y¤.Y§ø{
     A049  AA 10 7B AD 03 59 AA 7F 59 AD 00 00 00 00 00 00   ª.{-.Yª.Y-......

     A019  05 00 06 06 32 00 00 A0 09 09 B0 02 02 00 02 02   ....2..   °.....
     A029  A0 02 02 00 02 02 1E 00 00 00 00 00 00 01 01 00    ...............
     A039  00 01 00 04 F6 00 A0 19 05 59 A4 10 59 A7 F8 7B   ....ö. ..Y¤.Y§ø{
     A049  AA 10 7B AD 03 59 AA 7F 59 AD 00 00 00 00 00 00   ª.{-.Yª.Y-......
 
==== Regular Sinistar tables (First and Second DTIMER Ticks)
  
     A019  05 00 06 06 3C 00 00 A0 09 09 B0 02 02 00 02 02   ....<..   °.....
     A029  A0 02 02 00 02 02 1E 00 00 00 00 00 00 01 01 00    ...............
     A039  00 01 00 04 F6 00 A0 19 06 59 A4 10 59 A7 F8 7B   ....ö. ..Y¤.Y§ø{
     A049  AA 10 7B AD 03 59 AA 7F 59 AD 00 00 00 00 00 00   ª.{-.Yª.Y-......

     A019  06 00 06 06 48 00 00 C0 09 09 A0 02 02 00 02 02   ....H..À   .....
     A029  C0 02 02 00 02 02 24 00 00 00 00 00 00 01 01 00   À.....$.........
     A039  00 01 00 05 F4 00 A0 19 06 59 A4 10 59 A7 F8 7B   ....ô. ..Y¤.Y§ø{
     A049  AA 10 7B AD 03 59 AA 7F 59 AD 00 00 00 00 00 00   ª.{-.Yª.Y-......

==== WORKER INCREASE = 1 (ACTUALLY MODIFIES WARRIORS?!)

     A019  05 00 00 06 3C 00 00 0A 00 09 B0 00 02 00 00 02   ....<.... °.....
     A029  A0 00 02 00 00 02 1E 00 00 00 00 00 00 00 01 00    ...............
     A039  00 01 00 04 F6 00 A0 19 06 59 A4 01 59 A7 F8 7B   ....ö. ..Y¤.Y§ø{
     A049  AA 10 7B AD 03 59 AA 7F 59 AD 00 00 00 00 00 00   ª.{-.Yª.Y-......

     A019  06 00 06 06 48 00 00 0C 09 09 A0 02 02 00 02 02   ....H...   .....
     A029  C0 02 02 00 02 02 24 00 00 00 00 00 00 01 01 00   À.....$.........
     A039  00 01 00 05 F4 00 A0 19 06 59 A4 01 59 A7 F8 7B   ....ô. ..Y¤.Y§ø{
     A049  AA 10 7B AD 03 59 AA 7F 59 AD 00 00 00 00 00 00   ª.{-.Yª.Y-......

==== WORKER INCREASE = 2 (ACTUALLY MODIFIES WARRIORS?!)

     A019  05 00 00 06 3C 00 00 14 00 09 B0 00 02 00 00 02   ....<.... °.....
     A029  A0 00 02 00 00 02 1E 00 00 00 00 00 00 00 01 00    ...............
     A039  00 01 00 04 F6 00 A0 19 06 59 A4 02 59 A7 F8 7B   ....ö. ..Y¤.Y§ø{
     A049  AA 10 7B AD 03 59 AA 7F 59 AD 00 00 00 00 00 00   ª.{-.Yª.Y-......


==== WORKER INCREASE = 3 (ACTUALLY MODIFIES WARRIORS?!)

     A019  05 00 00 06 3C 00 00 1E 00 09 B0 00 02 00 00 02   ....<.... °.....
     A029  A0 00 02 00 00 02 1E 00 00 00 00 00 00 00 01 00    ...............
     A039  00 01 00 04 F6 00 A0 19 06 59 A4 03 59 A7 F8 7B   ....ö. ..Y¤.Y§ø{
     A049  AA 10 7B AD 03 59 AA 7F 59 AD 00 00 00 00 00 00   ª.{-.Yª.Y-......

Value pattern appears to start with $0A, then add another $0A each time.
$0A, $14, $1E, $28, $32, $3C.

--------------------------------------------------

Diff Increase math works like this:

***INITIAL VALUE***

Initial value is: ((Operator Difficulty Setting * 2) * Diff Increase value)

The default value for the Operator setting is $05, so this is normally seen as:

Initial value is: ($0A * Diff Increase value)

***TICK VALUE***

For every tick add (Diff Increase value * 2) to previous value.

1 = $0A, $0C, $0E, $10,...
2 = $14, $18, $1C, $20,...
3 = $1E, $24, $2A, $30,...
4 = $28, $30, $38, $40,...
5 = $32, $3C, $46, $50,...
6 = $3C, $48, $54, $60,...

$F8 = $B0, $A0, $90, $80,...

--------------------------------------------------

So, the source code is kinda misleading in how the data is defined.

The Diff. table source code reads like this originally:

InDif0	fdb	DTime
	fcb	6
	fdb	.PWor		* Workers
	fcb	10
	fdb	.PWar		* Warriors
	fcb	-8
	fdb	.PPl1		* Plan1's
	fcb	10
	fdb	.PPl3		* Plan3's
	fcb	3
	fdb	.PPl5		* Plan5's
	fcb	$7F
	fdb	.WAgg		* Warrior aggression
	fcb	0

But the data actually works like this:

InDif0	fdb	DTime
	fcb	6		;;(WORKER INCREASE)
	fdb	.PWor		
	fcb	10		;;(WARRIOR INCREASE)
	fdb	.PWar		
	fcb	-8		;;(PLAN1 INCREASE)
	fdb	.PPl1		
	fcb	10		;;(PLAN3 INCREASE)
	fdb	.PPl3		
	fcb	3		;;(PLAN5 INCREASE)
	fdb	.PPl5
	fcb	$7F		;;(WARRIOR AGGRESSION)
	fdb	.WAgg		
	fcb	0

6 is not only DTime, it's the Worker Increase!!  The zero at the end is not WAgg!! (This explains why changing this zero immediately crashes the game!)

------------------9/10/23------------------------

The Worker Increase byte is unusual in that it appears to be the only value that affects the other entities.

If the byte is zero, then all the populations will not increase and stay at their defined InPop values.
Meanwhile, the DTimer at $A019 continues counting up with every tick but skips increasing any of the populations numbers.

Anything greater than a zero for the Worker Increase byte will affect the Worker population but also "turn on" the DTimer Increase bytes for the other entities.

Therefore, it's best to label this byte as "Worker Increase/DTimer Enable"

---------------Important Notes about Values------------------------

Overflows are taken into consideration with the desired pop value.
Any increase byte value over $20 will start to automatically add enemies upon player initialization.

(Increase value * $0A = Initial Desired Pop Byte, Initial Fractional Byte)

$19 * $0A = $00, $FA
$20 * $0A = $01, $40

These values are added to any InPop0 values upon player initialization.

Entities can be removed from the population as well by using signed values such as $F8, but it's important that
the initial population is not zero.  Because of the signed values, $7F is the highest increase value (it adds four entites automatically!).

$7F * $0A = $04,$F6

What happens if you put zero as the InPop value?  The overflow starts to affect the desired pop value.

$80 * $0A = $500 ($FC00 signed)
$80 (with $00 InPop0 value) = $FC, $00

As you can see, the game tries to draw $FC (or 252 entities) in the sector.  Once the DTimer starts counting up, these large values usually crash the game.
It appears that the game tries to limit drawing so many objects on-screen so instead of 252 as the current population, it starts off at around $54 and
then starts decreasing enemies to prevent the game from crashing.

$FF * $0A = $9F6 ($FFF6 signed)
$FF (with $00 InPop0 value) = $FF, $F6

-----------Differences between AMOA '82 and Final (V17) Pop Tables------------

AMOA '82
     7697  00 06 00 00 00 00 00 0A 00 00 02 00 00 02 00 00   ................
     76A7  02 00 00 02 00 00 00 00 00 00 00 00 01 00 00 01   ................
     76B7  00 A0 19 06 59 C1 10 59 C4 F8 77 83 10 77 86 03   . ..YÁ.YÄøw..w..
     76C7  59 C7 7F 59 CA 00 06 06 01 01 01 01 03 00 00 01   YÇ.YÊ...........
     76D7  01 A0 19 06 59 C1 10 59 C4 FF 77 83 FF 77 86 03   . ..YÁ.YÄÿw.ÿw..
     76E7  59 C7 7F 59 CA 00 10 06 0A 02 02 02 02 00 00 01   YÇ.YÊ...........
     76F7  01 A0 19 0A 59 C1 0A 59 C4 F8 77 83 10 77 86 03   . ..YÁ.YÄøw..w..
     7707  59 C7 7F 59 CA 00 04 0A 0A 02 02 02 02 00 00 01   YÇ.YÊ...........
     7717  01 A0 19 04 59 C1 10 59 C4 F8 77 83 10 77 86 03   . ..YÁ.YÄøw..w..
     7727  59 C7 7F 59 CA 00 06 08 10 02 10 02 05 00 00 01   YÇ.YÊ...........
     7737  01 A0 19 06 59 C1 0A 59 C4 10 77 83 10 77 86 03   . ..YÁ.YÄ.w..w..
     7747  59 C7 7F 59 CA 00 00 02 00 00 00 00 00 04 00 00   YÇ.YÊ...........
     7757  04 00 00 04 00 00 04 00 00 05 00 00 00 00 00 00   ................
     7767  00 00 01 00 00 01 00 A0 19 06 59 C1 01 59 C4 01   ....... ..YÁ.YÄ.
     7777  77 83 01 77 86 03 59 C7 7F 59 CA 00 A0 22 00 A0   w..w..YÇ.YÊ. ". 
     7787  28 00 

Final Sinistar Buiild
     7ABE  00 06 00 00 00 00 00 0A 00 00 02 00 00 02 00 00   ................
     7ACE  02 00 00 02 00 00 00 00 00 00 00 00 01 00 00 01   ................
     7ADE  00 A0 19 06 59 A4 10 59 A7 F8 7B AA 10 7B AD 03   . ..Y¤.Y§ø{ª.{-.
     7AEE  59 AA 7F 59 AD 00 06 08 01 01 01 01 03 00 00 01   Yª.Y-...........
     7AFE  01 A0 19 06 59 A4 10 59 A7 FF 7B AA FF 7B AD 03   . ..Y¤.Y§ÿ{ªÿ{-.
     7B0E  59 AA 7F 59 AD 00 10 03 0A 02 02 02 02 00 00 01   Yª.Y-...........
     7B1E  01 A0 19 0A 59 A4 10 59 A7 F8 7B AA 10 7B AD 03   . ..Y¤.Y§ø{ª.{-.
     7B2E  59 AA 7F 59 AD 00 04 0A 0A 02 02 02 02 00 00 01   Yª.Y-...........
     7B3E  01 A0 19 04 59 A4 10 59 A7 F8 7B AA 10 7B AD 03   . ..Y¤.Y§ø{ª.{-.
     7B4E  59 AA 7F 59 AD 00 06 08 10 02 10 02 05 00 00 01   Yª.Y-...........
     7B5E  01 A0 19 06 59 A4 0A 59 A7 10 7B AA 10 7B AD 03   . ..Y¤.Y§.{ª.{-.
     7B6E  59 AA 7F 59 AD 00 00 02 00 00 00 00 00 04 00 00   Yª.Y-...........
     7B7E  04 00 00 04 00 00 04 00 00 05 00 00 00 00 00 00   ................
     7B8E  00 00 01 00 00 01 00 A0 19 06 59 A4 01 59 A7 01   ....... ..Y¤.Y§.
     7B9E  7B AA 01 7B AD 03 59 AA 7F 59 AD 00 A0 22 00 A0   {ª.{-.Yª.Y-. ". 
     7BAE  28 00

InPop2 (Worker Zone) appears to be tougher in AMOA '82 because there are 6 warriors upon
player init, instead of 3!  The Worker Zone diff table was also changed.  AMOA uses the less
intense $0A warrior increase value, but the final game uses the slightly larger $10 warrior increase value.

InPop1 (Void Zone) is slightly tougher in the final game because there are 8 warriors upon
player init, instead of 6!  Diff table in both versions are same.

------------------How do we make a more balanced Sinistar?--------------------

I believe that there should be a gradual increase in difficulty.  The first zone should just be a face-off between the player
and the Sinistar, with the workers trying to make it harder to mine crystals.  The first zone should act like a tutorial level,
by introducing the concepts of mining crystals and firing Sini-Bombs before being attacked by the Sinistar.

Then, in Worker Zone, we start to slowly introduce a new enemy, the Warrior.  Warriors are really good at shooting, so even
one Warrior can be surprisingly quick at killing the payer.  Therefore, we reduce the initial populations for the warrior
and also pay attention to how fast enemies are spawning via the warrior increase value.

Without warriors, the game can get one-sided quickly as the player easily racks up an insane amount of points by bombing the
incomplete Sinistar before it's finished building.  Therefore, as a pre-caution, warriors should be eventually added into the
first zone population after several DTimer ticks to prevent the player from just spamming the bomb button and blowing up
the defenseless skull planet.

--------------------------------------------------------------------------------

First Zone Changes

This single byte change reduces the spawn rate of the Warriors from $10 to $05.  I feel this is a much better slower speed
than the original game, that allows experienced players to rank up points at the first zone before the warriors enter the sector.

maincpu.rb@7ae4 = 05
--------------------------------------------------------------------------------

Worker Zone Changes

maincpu.rb@7b15 = 01
maincpu.rb@7b24 = 05

-------------------------------09/13/23-------------------------------------

It appears that upon warping to a new zone, new enemies are ADDED to the pre-existing population.

Also, the timer is reset after every SiniKill and then the DTimer value is multiplied by the
operator difficulty setting.  Here's an excerpt of the RstPop routine source code that's responsible for this:

4$	cmpb	SiniKills	* in number of sinistars killed
	bhs	3$		* If so, return
	stb	Temp		* Save it for next try

	lda	#06		* Else take a number

	pshs	X
	ldx	#GA1		* Operator difficulty adjust
	jsr	RCmosB		* Read from CMOS
	puls	X

	mul			* Calculate difficulty add based on oper. diff.
	tfr	B,A		* Put result in A (will be 30. for avg. diff.)
	jsr	ChgA		* Add that difficulty
	fdb	.DifTmr		* To difficulty timing structure
	ldb	Temp		* Get counter of difficulty waves advanced
	addb	#4		* Set it ahead another set of waves
	jmp	4$		* And see if that is enough for now

After the first SiniKill, every following Zone starts with $23 as the starting DTimer value.

To get this value, the game multiplies 6 by 5:

6 * 5 = 1E

The 6 is from $7C0B, where it gets multiplied by the operator difficulty setting.

Then that value $1E gets added by the operator difficulty setting, which gives us $23:

1E + 5 = 23

3$	pshs	X
	ldx	#GA1		* Operator difficulty adjust
	jsr	RCmosA		* Read from CMOS
	puls	X


	jsr	ChgA		* bump up the difficulty a bit at the beginning
	fdb	.DifTmr		* depending on operator setting 













