Here are a list of important cheats that I've come up with and use often to mod Sinistar


***DISABLE "RUG" TEST***

maincpu.rw@f063 = 1212
maincpu.rw@f069 = 1212
maincpu.rb@f06b = 12

***SKIP GAME OVER AND INFINITE LIVES***

maincpu.rb@2f84 = 20
maincpu.rb@2fba = 20

SAM/INITALL.SRC has conditional instructions in the "turn initialization" section of code,
used for debugging.  These replace the BNE instructions with BRA, effectively skipping the
game over routine.

***PLAY ALL SINISTAR SPEECH ANIMATIONS***

Trying to change Sinistar dialogue during status screen

Https://github.com/historicalsource/sinistar/blob/dc00bce37e5c5c7947369cf5040c10e4799f4a06/MICA/STATUS.SRC#L174

0x86F7 has $0B, which is the table offset that points to the Animation and Sound sequence
for “Beware I live”.  

This dummy animation table is located at $53AC

https://github.com/historicalsource/sinistar/blob/dc00bce37e5c5c7947369cf5040c10e4799f4a06/WITT/ANISINI.SRC#L152

But changing this to speech that has a lower priority doesn’t play so we have to follow
the table jump address and change the values there.  $09 works because it has the same
instructions that make any sound interruptible.

https://github.com/historicalsource/sinistar/blob/dc00bce37e5c5c7947369cf5040c10e4799f4a06/WITT/ANISINI.SRC#L196

Change speech sound
maincpu.rw@5425 = 

Change speech animation
maincpu.rw@542B = 

I AM SINISTAR
SC1  	  EQU    $5556
ANISC1    EQU    $5488

maincpu.rw@5425 = 5556
maincpu.rw@542B = 5488

BEWARE, I LIVE
SC2  	  EQU    $555B
ANISC2    EQU    $54A2

maincpu.rw@5425 = 555B
maincpu.rw@542B = 54A2

I HUNGER
SC3  	  EQU    $5560
ANISC3    EQU    $54C0

maincpu.rw@5425 = 5560
maincpu.rw@542B = 54C0

BEWARE, COWARD
SC4  	  EQU    $5565
ANISC4    EQU    $54CE

maincpu.rw@5425 = 5565
maincpu.rw@542B = 54CE

RUN, COWARD
SC5  	  EQU    $556A
ANISC5    EQU    $54EC

maincpu.rw@5425 = 556A
maincpu.rw@542B = 54EC

RUN**3
SC6  	  EQU    $556F
ANISC6    EQU    $5504

maincpu.rw@5425 = 556F
maincpu.rw@542B = 5504

I HUNGER, COWARD
SC7  	  EQU    $5574
ANISC7    EQU    $5520

maincpu.rw@5425 = 5574
maincpu.rw@542B = 5520

EEERRAAURGH!
SC8  	  EQU    $5579
ANISC8    EQU    $553A

maincpu.rw@5425 = 5579
maincpu.rw@542B = 553A

EEERRAAURGH! (Doesn't close mouth at end)
SC9  	  EQU    $557E
ANISC9    EQU    $5546

maincpu.rw@5425 = 557E
maincpu.rw@542B = 5546


***DISABLE KENCHK ($A1B3)***

Okay, this took a while to figure out but here is how to disable the routine that checks
if the copyright text scattered throughout the code is messed up.

It's easier to make these edits in the ROM files themselves rather than doing this in
Mame's debugger.

RICHFIXE.SRC has instructions on disabling KENCHK ($A1B3):
--------------------------------------------------------------------------------
***
*	This overrides the j*pzap during development.
***
	IFNDEF	Proms
	PUSHORG	ROMSAVE
	VECTOR	POWVECT
	SYMVER	KENCHK,KENCHK
	clr	KENCHK
	rts
	VECTOR	IniVect
	clr	KenChk
	rts
	PULLORG	ROMSAVE
	SYMVER	ZAPSIN,ZAPSini
	PUSHORG	ZAPSini		* In the PowVect routine, ignore the
	tst	$0		*   copyright violation test routine.
	PULLORG
	ENDIF	Proms
---------------------------------------------------------------------------------

First, let's disable ZAPSINI at $5230.  Here's what the original code looks like:

	Routine	ZAPSini
	tst	KenChk
	bpl	ADemo		* Continue IniVect
	New_Sleep	Task1,100$
	bra	ADemo		* Continue IniVect

KenChk works by flagging the copyright protection if it's NON-ZERO.  I've seen the value go to $F2 during gameplay.
We should clear it everytime instead of testing it.  Change the $7D opcode to an $7F.

It's important that we skip this "New_Sleep" task.  The branch if plus instruction (BPL)
will still go through even if KENCHK is zero because it's still a positive value, so we must NOP it out.



	Routine	ZAPSini
	clr	KenChk		;;7F A1 B3
	nop			;;12 (do NOP 9 times)
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	bra	ADemo		* Continue IniVect

Stop adding NOPs when you reach the BRA opcode ($20).

---------------------------------------------------------------------------------

Second edit is at $52AF.  This is where KENCHK gets written to if there's a copyright violation.

	SUBTTL	POWVECT - Routines occuring each machine power-up.
*****
*	PPPP    OOO   W   W  V   V  EEEEE   CCCC  TTTTT
*	P   P  O   O  W   W  V   V  E      C        T
*	PPPP   O   O  W W W  V   V  EEEE   C        T
*	P      O   O  W W W   V V   E      C        T
*	P       OOO    W W     V    EEEEE   CCCC    T
*****
	VECTOR	PowVect		* On each power-up
	clra			* The attract mode is marked to
	sta	AMDemo		*   start with the marquis page.
*
	CLRD			* Initialize the
	std	ASCPtr		*   Animate Speech Call Pointer to nowhere.
*
	pshs	X,U		* Save work registers
	LDX	#0
	LDD	#$EF
	STA	KENCHK
1$	LEAX	2,X
	ADDA	#$10
	BMI	3$
	LDU	D,X
	CMPU	100$,X
	ORCC	#$0A
	ANDCC	#$DE
	BNE	2$
	ORCC	#$0B
2$	TST	KENCHK
	BCS	1$
	BGT	1$
	INCB
	STB	KENCHK
	BCC	1$
3$	PULS	X,U		* Restore work registers
*
	rts

Replace PSHS X,U with CLR KenChk (7F A1 B3) and then replace all the instructions after with NOPs ($12)
until you reach RTS ($39).  This means adding 44 NOPs.  More experimenting is needed to see if there's
a better way to do this.  If there's no jumps to this section in other parts of the game logic,
then maybe we can use this space for new code.

-----------------------------------------------
Third edit is at $531F (ZAPRTS AT "EMPTY" ROUTINE)

There are three instances of the ZAPRTS Macro.  Here's Rich Witt's comments about this routine.

*****
*
* ZAPRTS
*	This macro is used in place of a normal RTS instruction.
*	The result of which is that if the copyright for Williams
*	is still intact, the RTS will occur normally.  Otherwise,
*	the RTS does not occur.  Used strategically, the effect is
*	that the system will SLOWLY begin to degrade.  Please do NOT
*	use this macro where the system will come to a halt.  That is
*	too easily traced and fixed.
*
*****
ZAPRTS	MACRO
	BLIST
	tst	KenChk
	lbge	rts
	MLIST
	ENDM

LBGE is a four byte instruction so we'll need to replace it with an RTS and three NOPs.
Again, we replace TST with CLR.  It should look like this:

	clr	KenChk		;;7F A1 B3
	RTS			;;39
	NOP			;;12
	NOP
	NOP

Do this again for the two ZAPRTS macros in the Warrior section of the game logic ($669C and $670F)

-------------------------------------------------------------------------------------------------

Lastly, let's say we wanted to be bad and fake the checksums for the ROM test so that we can have
diagnostics run but pass every time.

ROMTAB is the table that holds all the checksums that the test uses to verify data integrity.
The table is located at $F34F-$F371 and interestingly, it features different values than in the source code.

*	ROMTAB	- THIS TABLE INDICATES THE BASE OF THE PART, AND THE
*	RESULTING SUM.	IF SUM=0 THEN PART IS NOT STUFFED.

       IFE DEBUG		FOR ROM VERSION
ROMTAB	FCB	$00,$A2	0000
	FCB	$10,$A9	1000
	FCB	$20,$50	2000
	FCB	$30,$EB	3000
	FCB	$40,$A7	4000
	FCB	$50,$3E	5000
	FCB	$60,$22	6000
	FCB	$70,$B4	7000
	FCB	$80,$E1	8000
	FCB	$90,$0	9000
	FCB	$A0,$0	A000
	FCB	$B0,$0	B000
	FCB	$C0,$0	C000
	FCB	$D0,$06	D000
	FCB	$E0,$17	E000
	FCB	$F0,$77	F000
ROMEND	FCB	0
	FCB	$FC	CHECK BYTE (FUDGER) FOR THIS PART ($F000)
;
;Here's the original ROMTAB values for Sinistar: 
;
;00 C6 10 62 20 20 30 33 40 EF 50 FC 60 1A 70 59
;80 2A 90 00 A0 00 B0 00 C0 00 D0 00 E0 F8 F0 57 00 00
;
*
      ELSE			FOR DECON DEBUGGING
*
ROMTAB	FCB	$00,$0	0000
	FCB	$10,$0	1000
	FCB	$20,$0	2000
	FCB	$30,$0	3000
	FCB	$40,$0	4000
	FCB	$50,$0	5000
	FCB	$60,$0	6000
	FCB	$70,$0	7000
	FCB	$80,$0	8000
	FCB	$90,$0	9000
	FCB	$A0,$0	A000
	FCB	$B0,$0	B000
	FCB	$C0,$0	C000
	FCB	$D0,$0	D000
	FCB	$E0,$0	E000
	FCB	$F0,$0	F000
ROMEND	FCB	0
	FCB	$0	CHECK BYTE (FUDGER) FOR THIS PART ($F000)
       ENDIF

Replace with:
00 00 10 00 20 00 30 00 40 00 50 00 60 00 70 00
80 00 90 00 A0 00 B0 00 C0 00 D0 00 E0 00 F0 00 00 00

=========================================================================
***MULTI-CRYSTALS***

KenChk must be disabled to run this.

Inside the AddBomb routine, we jump over to the copyright string at $3435,
and then excute the following code:

	LDA   	$2E		;96 2E    (Grab a random seed from $982E)
	ANDA	#$03		;84 03    (AND the A register with #$03 so we don't get too many crystals)
	BNE	$343C		;26 01    (If it's not equal to zero, we skip INCA)
	INCA			;4C       (But if we do get a zero, Increase A by 1)
	ADCA	$A013		;B9 A0 13 (Add A with BOMBS)
	CMPA	#$14		;81 14    (Compare A with maximum amount of BOMBS)
	BLE	$3448		;2F 02    (If the number is less then #$14, then go to RTS)
	LDA	#$14		;86 14	  (Otherwise, we replace the larger value with #$14)
	RTS			;39	  (Go back to where we left off with the AddBomb routine)

Here's the debugger commands:

maincpu.rb@5688 = BD
maincpu.rw@5689 = 3435

maincpu.rq@3435 = 962E840326014CB9
maincpu.rq@343D = A01381142F028614
maincpu.rb@3448 = 39

The first set of commands overwrites the INCA and CMPA #14 instructions originally in the AddBomb routine.
Instead we JSR to $3435.

The second set overwrites the copyright message at $3435 with the multi-crystal code.

There is a DMA bug that causes issues with graphics and extra care had to be taken into consideration in the original source
for this issue.  The UpBombs routines that updates the HUD showing all the bombs only draws one bomb at a time.
If multiple bombs are picked up, it only draws the last bomb collected.

----------------------------------------------
Replace player ship fire sound with fire noise from "Blaster"
(This overwrites one of the unused Noise sound effects and changes the player fire sound call to use this sound ID instead)

soundcpu.rq@f686=86A5971186859712
soundcpu.rq@f68e=860397138680971D
soundcpu.rq@f696=86FF9714CE0300DF
soundcpu.rq@f69e=1596114824029812
soundcpu.rq@f6a6=B70400D613092705
soundcpu.rq@f6ae=5A26FA20EED613D0
soundcpu.rq@f6b6=14D713D11D2704DE
soundcpu.rw@f6be=1520
soundcpu.rw@f6c0=E039

maincpu.rb@4daf=b6
----------------------------------------------
Disable Warrior firing

maincpu.rw@6a42=8600	;Load zero instead of WAgg in Inhibit Routine
maincpu.rb@6a44=12

maincpu.rb@6917=ff	;anda	#PWaShInhibit is now ANDA #$FF (instead of 0F) (Found in WITT/SHOOT.SRC)
